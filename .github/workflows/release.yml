name: Automated Release and Publish

permissions:
  contents: read
  pull-requests: write
  packages: write

on:
  pull_request:
    types: [closed]

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release and Publish
    runs-on: macos-14
    if: github.event.pull_request.merged == true
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for release labels
        id: check-labels
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.pull_request.labels.map(label => label.name);
            console.log('PR labels:', labels);
            
            let releaseType = null;
            let shouldRelease = false;
            
            if (labels.includes('release:major')) {
              releaseType = 'major';
              shouldRelease = true;
            } else if (labels.includes('release:minor')) {
              releaseType = 'minor';
              shouldRelease = true;
            } else if (labels.includes('release:patch')) {
              releaseType = 'patch';
              shouldRelease = true;
            }
            
            core.setOutput('should_release', shouldRelease.toString());
            core.setOutput('release_type', releaseType || '');
            core.setOutput('pr_title', context.payload.pull_request.title);
            core.setOutput('pr_number', context.payload.pull_request.number.toString());
            
            if (shouldRelease) {
              console.log(`🚀 Release triggered: ${releaseType}`);
            } else {
              console.log('ℹ️ No release labels found, skipping release');
            }

      - name: Set up Xcode
        if: steps.check-labels.outputs.should_release == 'true'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Setup Ruby
        if: steps.check-labels.outputs.should_release == 'true'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'
          bundler-cache: true

      - name: Install dependencies
        if: steps.check-labels.outputs.should_release == 'true'
        run: bundle install

      - name: List available simulators and SDKs
        if: steps.check-labels.outputs.should_release == 'true'
        run: |
          echo "=== Available Simulators ==="
          xcrun simctl list devices available
          echo "=== Available SDKs ==="
          xcodebuild -showsdks
          echo "=== Xcode Version ==="
          xcodebuild -version

      - name: Configure Git
        if: steps.check-labels.outputs.should_release == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        if: steps.check-labels.outputs.should_release == 'true'
        id: current-version
        run: |
          CURRENT_VERSION=$(grep "quilttSdkVersion" Sources/QuilttConnector/QuilttSdkVersion.swift | sed 's/.*"\(.*\)".*/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        if: steps.check-labels.outputs.should_release == 'true'
        id: new-version
        run: |
          # Use Ruby semantic gem for version bumping
          bundle exec ruby -e "
            require 'semantic'
            current = Semantic::Version.new('${{ steps.current-version.outputs.current_version }}')
            new_version = current.increment!(:${{ steps.check-labels.outputs.release_type }})
            puts new_version
            File.write('NEW_VERSION', new_version.to_s)
          "
          
          NEW_VERSION=$(cat NEW_VERSION)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "🎯 Releasing version: $NEW_VERSION"

      - name: Update version files
        if: steps.check-labels.outputs.should_release == 'true'
        run: |
          # Update QuilttSdkVersion.swift
          echo "import Foundation" > Sources/QuilttConnector/QuilttSdkVersion.swift
          echo "public let quilttSdkVersion = \"${{ steps.new-version.outputs.new_version }}\"" >> Sources/QuilttConnector/QuilttSdkVersion.swift

      - name: Build and validate Swift package
        if: steps.check-labels.outputs.should_release == 'true'
        run: |
          swift build
          swift test

      - name: Build example app
        if: steps.check-labels.outputs.should_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          bundle exec fastlane ios build_example_app

      - name: Commit version updates
        if: steps.check-labels.outputs.should_release == 'true'
        run: |
          git add Sources/QuilttConnector/QuilttSdkVersion.swift
          git commit -m "chore: release v${{ steps.new-version.outputs.new_version }}"
          git push origin main

      - name: Create Git tag
        if: steps.check-labels.outputs.should_release == 'true'
        run: |
          git tag "v${{ steps.new-version.outputs.new_version }}"
          git push origin "v${{ steps.new-version.outputs.new_version }}"

      - name: Create GitHub Release
        if: steps.check-labels.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.new-version.outputs.new_version }}"
          name: "Release v${{ steps.new-version.outputs.new_version }}"
          body: |
            ## 🚀 Release v${{ steps.new-version.outputs.new_version }}
            
            **Release Type:** ${{ steps.check-labels.outputs.release_type }}
            **Triggered by PR:** #${{ steps.check-labels.outputs.pr_number }} - ${{ steps.check-labels.outputs.pr_title }}
            
            ### Changes
            This release was automatically created from the merged pull request.
            
            ### Installation
            
            **Swift Package Manager:**
            ```swift
            dependencies: [
                .package(url: "https://github.com/quiltt/quiltt-ios.git", from: "${{ steps.new-version.outputs.new_version }}")
            ]
            ```
            
            **Xcode:**
            1. File → Add Package Dependency
            2. Enter: `https://github.com/quiltt/quiltt-ios`
            3. Select version `${{ steps.new-version.outputs.new_version }}`
            
            ### Requirements
            - iOS 14.0+
            - Swift 5.9+
            - Xcode 15.0+
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR with release info
        if: steps.check-labels.outputs.should_release == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ steps.check-labels.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Release Complete!**
              
              This PR triggered a **${{ steps.check-labels.outputs.release_type }}** release:
              - **Version:** v${{ steps.new-version.outputs.new_version }}
              - **Swift Package:** Available via SPM at \`https://github.com/quiltt/quiltt-ios\`
              - **GitHub Release:** [v${{ steps.new-version.outputs.new_version }}](${context.payload.repository.html_url}/releases/tag/v${{ steps.new-version.outputs.new_version }})
              
              ✅ Package is now available for installation!
              
              **Installation:**
              \`\`\`swift
              dependencies: [
                  .package(url: "https://github.com/quiltt/quiltt-ios.git", from: "${{ steps.new-version.outputs.new_version }}")
              ]
              \`\`\``
            });
