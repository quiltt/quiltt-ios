require 'octokit'
require 'semantic'

default_platform :ios

REPO_NAME = 'quiltt/quiltt-ios'.freeze
GITHUB_TOKEN = ENV['GITHUB_TOKEN']

def release(level)
  client = ::Octokit::Client.new(access_token: GITHUB_TOKEN)
  latest_release = client.latest_release(REPO_NAME)

  current_version = Semantic::Version.new(latest_release.tag_name)
  new_version = current_version.increment!(level).to_s

  set_github_release(
    repository_name: 'quiltt/quiltt-ios',
    api_token: GITHUB_TOKEN,
    name: new_version.to_s,
    tag_name: new_version.to_s,
    is_generate_release_notes: true,
    commitish: 'main'
  )
end

platform :ios do
  desc 'Release patch version'
  lane :release_patch do
    build_example_app
    # test_example_app
    release(:patch)
  end

  desc 'Release minor version'
  lane :release_minor do
    lane :release_minor do
      build_example_app
      # test_example_app
      release(:minor)
    end
  end

  desc 'Release major version'
  lane :release_major do
    lane :release_major do
      build_example_app
      # test_example_app
      release(:major)
    end
  end

  desc 'Build Example App'
  lane :build_example_app do
    Dir.chdir('..') do
      success = system('xcodebuild -workspace ExampleSwiftUI/ExampleSwiftUI.xcodeproj/project.xcworkspace -allowProvisioningUpdates -scheme ExampleSwiftUI -sdk iphoneos build')
      raise 'Build failed' unless success
    end
    # gym(
    #   workspace: 'ExampleSwiftUI/ExampleSwiftUI.xcodeproj/project.xcworkspace',
    #   scheme: 'ExampleSwiftUI',
    #   sdk: 'iphoneos',
    #   clean: true,
    #   xcargs: '-allowProvisioningUpdates'
    # )
  end
end
